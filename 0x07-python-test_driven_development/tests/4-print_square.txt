Documentation for 4-print_square.py
Prototype for square-printing â€œprint_square(size)".
How it works
Squares to be printed using the "#" character. The variable "size"
represents the height and width of the square.
===:
>>> print_squto be = __import__('4-print_square').print_square
>>> print_square(1)
#
===:
>>> print_square(4)
####
####
####
####
===:
>>> print_square(10)
##########
##########
##########
##########
##########
##########
##########
##########
##########
##########
If "size" is zero, It prints nothing.
===:
>>> print_square(0)
Invalid Sizes
=
The variable "size" is always an integer. Otherwise, then TypeError.
===:
>>> print_square("not an int")
Traceback (most recent call last):
TypeError: size is always an integer
===:
>>> print_square(5.5)
Traceback (most recent call last):
TypeError: size is always an integer
===:
>>> print_square(None)
Traceback (most recent call last):
TypeError: size is always an integer
If "size" is less than zero, a ValueError is raised.
===:
>>> print_square(-7)
Traceback (most recent call last):
ValueError: size is always >= 0
type-checking occurs before value-checking.
===:
>>> print_square(-7.5)
Traceback (most recent call last):
TypeError: size is always an integer
At least one argument is always provided.
===:
>>> print_square()
Traceback (most recent call last):
TypeError: print_square() missing 1 required positional argument: 'size'
