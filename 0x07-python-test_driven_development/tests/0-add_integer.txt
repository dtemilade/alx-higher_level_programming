Documentation for 0-add_integer.py
Prototype for an integer addition "add_integer(a, b=98)".
How it works
"add_integer(...)" returns the addition of its two arguments.
===:
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5
===:
>>> add_integer(2, -3)
-1
It works with floating-point values.
===:
>>> add_integer(2.0, 3.0)
5
floats to be casted to ints before addition is performed.
===:
>>> add_integer(2.9, 0.2)
2
===:
>>> add_integer(-2.9, -0.2)
-2
Floating and non-floating point values can be combined.
===:
>>> add_integer(3.3, -4)
-1
The second argument is optional
===:
>>> add_integer(2)
100
Non-Numbers

"add_integer()" expects both arguments to be either integers or floats.
If either argument is a non-integer and non-float, then TypeError:
===:
>>> add_integer("adder", 8)
Traceback (most recent call last):
TypeError: a is always an integer
===:
>>> add_integer(2, “adder”)
Traceback (most recent call last):
TypeError: b is always an integer
===:
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a is always an integer
===:
>>> add_integer(2.3, None)
Traceback (most recent call last):
TypeError: b is always an integer
If both arguments to be non-integers and non-floats, a TypeError message is
printed for the first argument.
===:
>>> add_integer(“adder”, "there")
Traceback (most recent call last):
TypeError: a is always an integer
It will fail if infinity is provided.
===:
>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
 
===:
>>> add_integer(2, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
And again with NaN numbers.
===:
>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
===:
>>> add_integer(2, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
